<project name="build.sample" default="package" basedir="."
    xmlns:ivy="http://ant.apache.org/ivy"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
	This is a template you can use for your build.xml file.
	You need to change this description to be a description
	of your project. This will appear when someone does an
	"ant -p" or "ant -projecthelp".

    </description>

    <!-- YOU NEED ANT 1.9.1 OR BETTER -->
    <fail> <!--message="You need Ant version 1.9.1 or better to run this build">-->
	WARNING: Wrong version of Ant!

	You need Ant 1.9.1 or better to run this build.  You currently
	are using Ant version ${ant.version}. 
	Download Ant 1.9.1 from http://ant.apache.org and install it on
	your system.

	If you are using Eclpse, you can select the version of Ant you
	want to use in Eclipse by going to the "Eclipse->Preferences"
	menu item on Mac OS X, or the "Windows->Configuration" in
	Windows. Then in the list, select "Ant->Runtime" on the left.
	On the right side, click on the "Ant Home" button and select
	the directory where Ant 1.9.1 is located.
	<condition>
	    <not>
		<antversion atleast="1.9.1"/>
	    </not>
	</condition>
    </fail>

    <property name="build.jar"			value="true"/>
    <property name="build.war"			value="true"/>
    <property name="build.ear"			value="true"/>
    <property name="test.templates"		value="false"/>
    <property name="run.junit.tests"		value="false"/>

    <condition property="do.run.junit.tests">
	<istrue value="${run.junit.tests}"/>
    </condition>

    <condition property="do.build.jar">
	<istrue value="${build.jar}"/>
    </condition>

    <condition property="do.build.war">
	<istrue value="${build.war}"/>
    </condition>

    <condition property="do.build.ear">
	<istrue value="${build.ear}"/>
    </condition>



    <!-- Set these to "true" to unwar or unjar files -->
    <property name="unjar"			value="false"/>
    <property name="unwar"			value="false"/>
    <property name="unear"			value="false"/>

    <!-- Use the Build Properties file to control aspects of the build -->
    <property name="build.properties"		value="${basedir}/build.properties"/>
    <property file="${build.properties}"/>

    <!-- Import Ivy tasks and configuration -->
    <property name="ivy.dir"			value="${basedir}/ivy.dir"/>
    <import file="${ivy.dir}/ivy.tasks.xml"/>

    <property name="ivy.log"			value="quiet"/>
    <property name="ivy.resolve.haltonfailure"	value="true"/>
    <property name="ivy.cleancache"		value="true"/>

    <property name="copy.verbose"		value="false"/>

    <!-- Working Directories. All built files should go under one of these -->
    <property name="target.dir"			value="${basedir}/target"/>
    <property name="archive.dir"		value="${target.dir}/archive"/>
    <property name="maven.dir"			value="${target.dir}/maven"/>

    <property name="work.dir"			value="${target.dir}/work"/>
    <property name="jar.dir"			value="${work.dir}/jars"/>
    <property name="war.dir"			value="${work.dir}/wars"/>
    <property name="sar.dir"			value="${work.dir}/sars"/>
    <property name="ear.dir"			value="${work.dir}/ears"/>

    <property name="unjar.dir"			value="${work.dir}/unpacked/jars"/>
    <property name="unwar.dir"			value="${work.dir}/unpacked/wars"/>
    <property name="unsar.dir"			value="${work.dir}/unpacked/sars"/>
    <property name="unear.dir"			value="${work.dir}/unpacked/ears"/>

    <property name="lib.dir"			value="${target.dir}/lib"/>

    <!-- Standard Maven Directory Layout -->
    <property name="main.dir"			value="${basedir}/src/main"/>
    <property name="main.webapp.dir"		value="${main.dir}/webapp"/>
    <property name="main.srcdir"		value="${main.dir}/java"/>
    <property name="main.resources.dir" 	value="${main.dir}/resources"/>
    <property name="main.resources2.dir" 	value="${main.dir}/resources2"/>
    <property name="main.config.dir"		value="${main.dir}/config"/>
    <property name="main.bin.dir"		value="${main.dir}/bin"/>
    <property name="main.destdir"		value="${target.dir}/classes"/>

    <!-- Default Test Source Directories. These parallel the Main structure -->
    <property name="test.dir"			value="${basedir}/src/test"/>
    <property name="test.webapp.dir"		value="${test.dir}webapp"/>
    <property name="test.srcdir"		value="${test.dir}/java"/>
    <property name="test.resources.dir" 	value="${test.dir}/resources"/>
    <property name="test.destdir"		value="${target.dir}/test-classes"/>

    <!-- Maven Genereated Source Directory Template Structure -->
    <property name="generated.srcdir"		value="${main.dir}/generated-sources"/>
    <property name="wsdl.srcdir"		value="${generated.srcdir}/wsld"/>

    <!-- Java Compile Properties -->
    <property name="javac.lint"			value="true"/>
    <property name="javac.deprecation"		value="true"/>
    <property name="javac.source"		value="1.6"/>
    <property name="javac.target"		value="1.6"/>

    <property name="javac.fork"			value="false"/> <!-- Don't fork unless necessary! -->

    <!-- Only used if "javac.fork" is true -->
    <property name="javac.memoryInitialSize" 	value="64m"/>
    <property name="javac.memoryMaximumSize" 	value="256m"/>

    <!-- JUnit Properties -->
    <property name="junit.fork"			value="true"/>
    <property name="junit.includeAntRuntime" 	value="true"/>
    <property name="junit.timeout"		value="2000"/>
    <property name="junit.tempdir"		value="${target.dir}"/>
    <property name="junit.maxmemory"		value="128m"/>
    <property name="junit.batchtest.todir" 	value="${target.dir}/surefire-reports"/>
    <property name="junit.formatter.type" 	value="xml"/>

    <!-- Ivy Report Properties -->
    <property name="ivy.report.todir"		value="${target.dir}/ivy-reports"/>
    <property name="ivy.report.xsl"		value="true"/>
    <property name="ivy.report.xml"		value="false"/>
    <property name="ivy.report.dot"		value="false"/>
    <property name="ivy.report.graph"		value="false"/>

    <!-- Findbugs Properties -->
    <property name="findbugs.output"		value="xml"/>
    <property name="findbugs.outputfile"	value="${target.dir}/findbugs.${findbugs.output}"/>

    <!-- Check Style Properties -->
    <property name="checkstyle.formatter.type"	value="xml"/>
    <property name="checkstyle.formatter.tofile" value="${target.dir}/checkstyle.${checkstyle.formatter.type}"/>

    <!-- PMD Properties -->
    <property name="pmd.formatter.type" 	value="xml"/>
    <property name="pmd.formatter.toFile"	value="${target.dir}/pmd.${pmd.formatter.type}"/>

    <!-- CPD Properties -->
    <property name="cpd.format"			value="xml"/> <!-- xml, cvs, text -->

    <property name="cpd.outputFile"		value="${target.dir}/cpd.${cpd.format}"/>
    <property name="cpd.minimumTokenCount" 	value="100"/>
    <property name="cpd.ignoreLiterals" 	value="false"/>
    <property name="cpd.ignoreIdentifiers" 	value="false"/>

    <!-- Javadoc Properties -->
    <property name="javadoc.destdir"		value="${target.dir}/apidocs"/>

    <!-- Names of your jars, wars, and ears -->
    <property name="jar.name"			value="${ant.project.name}.jar"/>
    <property name="war.name"			value="${ant.project.name}.war"/>
    <property name="ear.name"			value="${ant.project.name}.ear"/>

    <!-- Checking if various directories are available -->
    <available property="resources.dir.available"
	file="${main.resources.dir}"
	type="dir"/>

    <available property="resources2.dir.available"
	file="${main.resources2.dir}"
	type="dir"/>

    <available property="test.resources.dir.available"
	file="${test.resources.dir}"
	type="dir"/>

    <!-- TARGETS -->

    <target name="clean"
	description="Cleans all built artifacts and the Ivy Cache">
	<ivy:cleancache if:true="ivy.cleancache"/>
	<delete dir="${target.dir}"/>
    </target>

    <target name="-resolve">
	<ivy:resolve
	    haltonfailure="${ivy.resolve.haltonfailure}"
	    log="${ivy.log}"/>
    </target>

    <target name="-main.classpath"
	depends="-resolve">
	<ivy:cachepath pathid="main.classpath"
	    conf="compile,provided"
	    log="${ivy.log}"/>
    </target>

    <!-- Used by wars and ears -->
    <target name="retrieve.runtime.jars"
	depends="-resolve">
	<if>
	    <or>
		<isset property="build.war"/>
		<isset property="build.ear"/>
	    </or>
	    <then>
		<ivy:retrieve log="${ivy.log}"
		    pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]"
		    conf="runtime"/>
	    </then>
	</if>
    </target>

    <target name="compile"
	description="Compiles the Java source code"
	depends="-main.classpath">

	<mkdir dir="${main.destdir}"/>

	<javac.macro destdir="${main.destdir}"
	    lint="${javac.lint}"
	    deprecation="${javac.deprecation}"
	    source="${javac.source}"
	    target="${javac.target}"
	    fork="${javac.fork}">
	    <src path="${main.srcdir}"/>
	    <classpath refid="main.classpath"/>
	</javac.macro>

	<!-- Handling Generated Sources -->
	<if>
	    <available file="${wsdl.srcdir}"
		type="dir"/>
	    <then>
		<javac.macro destdir="${main.destdir}"
		    lint="false"
		    deprecation="false"
		    target="${javac.target}"
		    fork="${javac.fork}">
		    <src path="${wsld.srcdir}"/>
		    <classpath refid="main.classpath"/>
		    <classpath path="${main.destdir}"/>
		</javac.macro>
	    </then>
	</if>
    </target>

    <target name="test-compile"
	if="do.run.junit.tests"
	depends="compile"
	description="Compile the JUnit tests">

	<ivy:cachepath pathid="test.classpath"
	    conf="test"
	    log="${ivy.log}"/>

	<mkdir dir="${test.destdir}"/>

	<javac.macro destdir="${test.destdir}"
	    lint="${javac.lint}"
	    deprecation="${javac.deprecation}"
	    fork="${javac.fork}">
	    <src path="${test.srcdir}"/>
	    <classpath refid="test.classpath"/>
	    <classpath path="${main.destdir}"/>
	</javac.macro>

	<!-- Copy over resources if they exist -->
	<copy todir="${test.destdir}" verbose="${copy.verbose}"
	    if:true="resources.dir.available">
	    <fileset dir="${main.resources.dir}"/>
	</copy>
	<copy todir="${test.destdir}" verbose="${copy.verbose}"
	    if:true="test.resources.dir.available">
	    <fileset dir="${test.resources.dir}"/>
	</copy>
    </target>

    <target name="test"
	if="do.run.junit.tests"
	depends="-resolve,test-compile"
	description="Run the JUnit tests">

	<mkdir dir="${junit.batchtest.todir}"/>
	<jacoco.coverage>
	    <junit fork="${junit.fork}"
		maxmemory="${junit.maxmemory}"
		includeAntRuntime="${junit.includeAntRuntime}">
		<classpath>
		    <pathelement path="${main.destdir}"/>
		    <pathelement path="${test.destdir}"/>
		</classpath>
		<classpath refid="test.classpath"/>
		<formatter type="${junit.formatter.type}"/>
		<batchtest
		    todir="${junit.batchtest.todir}">
		    <fileset dir="${test.destdir}"/>
		</batchtest>
	    </junit>
	</jacoco.coverage>
    </target>

    <target name="package"
	description="Builds all the packages for deployment"
	depends="jar,war,ear"/>

    <target name="jar"
	if="do.build.jar"
	depends="compile">

	<jar.macro destfile="${archive.dir}/${jar.name}">
	    <fileset dir="${main.destdir}"/>
	    <fileset dir="${main.resources.dir}"
		if:true="resources.dir.available"/>
	</jar.macro>

	<unjar.macro srcfile="${jar.dir}/${jar.name}"
	    if:true="unjar"/>
    </target>

    <target name="war"
	if="do.build.war"
	depends="compile,retrieve.runtime.jars">

	<war.macro destfile="${war.dir}/${war.name}"
	    webxml="${main.webapp.dir}/WEB-INF/web.xml">
	    <lib dir="${lib.dir}/runtime"/>
	    <classes dir="${main.destdir}"/>
	    <classes dir="${main.resources.dir}"
		if:true="resources.dir.available"/>
	    <webinf dir="${main.webapp.dir}/WEB-INF">
		<exclude name="web.xml"/>
	    </webinf>
	    <fileset dir="${main.webapp.dir}">
		<exclude name="WEB-INF/**"/>
	    </fileset>
	    <fileset dir="${main.resources2.dir}"
		if:true="resources2.dir.available"/>
	</war.macro>

	<unwar.macro srcfile="${war.dir}/${war.name}"
	    if:true="unwar"/>
    </target>

    <target name="ear"
	if="do.build.ear"
	depends="retrieve.runtime.jars">

	<!-- ear.macro automatically adds the Maven and Build info -->
	<ear.macro destfile="${ear.dir}/${ear.name}"
	    appxml="${main.resources.dir}/WEB-INF/application.xml">
	    <fileset dir="${lib.dir}runtime"/>
	    <zipfileset dir="${main.resources.dir}" prefix="${WEB-INF}">
		<exclude name="application.xml"/>
	    </zipfileset>
	    <fileset dir="${main.webapp.dir}"/>
	</ear.macro>

	<unear.macro srcfile="${ear.dir}/${ear.name}"
	    if:true="unear"/>
    </target>

    <!-- Runs all of the site reports -->
    <target name="site"
	depends="ivy.report,findbugs,pmd,cpd,checkstyle,javadoc,jacoco, test.templates"
	description="Produces a whole slew of reports"/>

    <target name="ivy.report"
	depends="-resolve"
	description="Produced the Ivy Dependency Report">
	<ivy:report
	    todir="${ivy.report.todir}"
	    xml="${ivy.report.xml}"
	    xsl="${ivy.report.xsl}"
	    graph="${ivy.report.graph}"
	    dot="{ivy.report.dot}"/>
    </target>

    <target name="javadoc"
	description="Produce the Javadocs">
	<mkdir dir="${javadoc.destdir}"/>
	<javadoc sourcepath="${main.srcdir}"
	    destdir="${javadoc.destdir}"
	    version="true"
	    author="true"
	    header="true"
	    footer="true"
	    bottom="true"/>
    </target>

    <target name="findbugs"
	depends="compile"
	description="Run the findbugs report for Jenkins">

	<findbugs.macro
	    output="${findbugs.output}"
	    outputFile="${target.dir}/findbugs.${findbugs.output}">
	    <auxClasspath refid="main.classpath"/>
	    <class location="${main.destdir}"/>
	    <sourcePath path="${main.srcdir}"/>
	</findbugs.macro>
    </target>

    <target name="pmd"
	description="Runs PMD Bug Detector Against Source">

	<mkdir dir="${target.dir}"/>

	<pmd.macro
	    file.type="${pmd.formatter.type}"
	    file.name="${pmd.formatter.toFile}">
	    <source>
		<fileset dir="${main.srcdir}"/>
	    </source>
	</pmd.macro>
    </target>

    <target name="cpd"
	description="Detects copy and pasting in code">

	<mkdir dir="${target.dir}"/>

	<cpd.macro
	    format="${cpd.format}"
	    outputFile="${target.dir}/cpd.${cpd.format}">
	    <fileset dir="${main.srcdir}">
		<include name="**/*.java"/>
	    </fileset>
	</cpd.macro>
    </target>

    <target name="checkstyle"
	description="Check Source Code Styles">

	<checkstyle.macro
	    formatter.type="${checkstyle.formatter.type}"
	    formatter.toFile="${target.dir}/checkstyle.${checkstyle.formatter.type}">
	    <fileset dir="${main.srcdir}"/>
	</checkstyle.macro>
    </target>

    <target name="jacoco"
	if="do.run.junit.tests"
	description="Produce the JaCoCo coverage report from the instrumented JaCoCo JUnit tasks"
	depends="test">

	<jacoco.report>
	    <sourcefiles>
		<fileset dir="${main.srcdir}"/>
	    </sourcefiles>
	    <classfiles>
		<fileset dir="${main.destdir}"/>
	    </classfiles>
	</jacoco.report>
    </target>

    <target name="test.templates"
	description="Test the autoconfiguration templates and answers">
	<test.templates
	    if:true="test.templates"
	    template.root.dir="${main.dir}"
	    answers.dir="${main.config.dir}"/>
    </target>

    <target name="all" 
	depends="clean, package, test, site"
	description="Jenkins Target. Cleans everything and runs everything"/>

    <macrodef name="unwar.macro"		description="Unpacks war">
	<attribute name="srcfile"/>
	<sequential>
	    <fail message="&lt;unwar.macro&gt; failed: War file @{srcfile} does not exist">
		<condition>
		    <not>
			<available file="@{srcfile}" type="file"/>
		    </not>
		</condition>
	    </fail>
	    <var name="base.war.name" unset="true"/>
	    <basename property="base.war.name" file="@{srcfile}"/>
	    <mkdir dir="${unwar.dir}/${base.war.name}"/>
	    <unwar src="@{srcfile}" dest="${unwar.dir}/${base.war.name}"/>
	</sequential>
    </macrodef>

    <macrodef name="unsar.macro"		description="Unpacks sar">
	<attribute name="srcfile"/>
	<sequential>
	    <fail message="&lt;unsar.macro&gt; failed: War file @{srcfile} does not exist">
		<condition>
		    <not>
			<available file="@{srcfile}" type="file"/>
		    </not>
		</condition>
	    </fail>
	    <var name="base.sar.name" unset="true"/>
	    <basename property="base.sar.name" file="@{srcfile}"/>
	    <mkdir dir="${unsar.dir}/${base.sar.name}"/>
	    <unjar src="@{srcfile}" dest="${unsar.dir}/${base.sar.name}"/>
	</sequential>
    </macrodef>

    <macrodef name="unjar.macro"		description="Unpacks jar">
	<attribute name="srcfile"/>
	<sequential>
	    <fail message="&lt;unjar.macro&gt; failed: War file @{srcfile} does not exist">
		<condition>
		    <not>
			<available file="@{srcfile}" type="file"/>
		    </not>
		</condition>
	    </fail>
	    <var name="base.jar.name" unset="true"/>
	    <basename property="base.jar.name" file="@{srcfile}"/>
	    <mkdir dir="${unjar.dir}/${base.jar.name}"/>
	    <unjar src="@{srcfile}" dest="${unjar.dir}/${base.jar.name}"/>
	</sequential>
    </macrodef>

    <macrodef name="unear.macro"		description="Unpacks ear">
	<attribute name="srcfile"/>
	<sequential>
	    <fail message="&lt;unear.macro&gt; failed: War file @{srcfile} does not exist">
		<condition>
		    <not>
			<available file="@{srcfile}" type="file"/>
		    </not>
		</condition>
	    </fail>
	    <var name="base.ear.name" unset="true"/>
	    <basename property="base.ear.name" file="@{srcfile}"/>
	    <mkdir dir="${unear.dir}/${base.ear.name}"/>
	    <unjar src="@{srcfile}" dest="${unear.dir}/${base.ear.name}"/>
	</sequential>
    </macrodef>
</project>
